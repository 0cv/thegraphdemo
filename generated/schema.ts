// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("player", Value.fromString(""));
    this.set("playerHasWon", Value.fromBoolean(false));
    this.set("time", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bet entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bet", id.toString(), this);
    }
  }

  static load(id: string): Bet | null {
    return changetype<Bet | null>(store.get("Bet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    return value!.toString();
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get playerHasWon(): boolean {
    let value = this.get("playerHasWon");
    return value!.toBoolean();
  }

  set playerHasWon(value: boolean) {
    this.set("playerHasWon", Value.fromBoolean(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalPlayedCount", Value.fromI32(0));
    this.set("hasWonCount", Value.fromI32(0));
    this.set("hasLostCount", Value.fromI32(0));
    this.set("bets", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Player entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Player", id.toString(), this);
    }
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalPlayedCount(): i32 {
    let value = this.get("totalPlayedCount");
    return value!.toI32();
  }

  set totalPlayedCount(value: i32) {
    this.set("totalPlayedCount", Value.fromI32(value));
  }

  get hasWonCount(): i32 {
    let value = this.get("hasWonCount");
    return value!.toI32();
  }

  set hasWonCount(value: i32) {
    this.set("hasWonCount", Value.fromI32(value));
  }

  get hasLostCount(): i32 {
    let value = this.get("hasLostCount");
    return value!.toI32();
  }

  set hasLostCount(value: i32) {
    this.set("hasLostCount", Value.fromI32(value));
  }

  get bets(): Array<string> {
    let value = this.get("bets");
    return value!.toStringArray();
  }

  set bets(value: Array<string>) {
    this.set("bets", Value.fromStringArray(value));
  }
}
